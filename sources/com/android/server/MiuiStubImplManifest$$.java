package com.android.server;

import com.android.server.AppOpsServiceStubImpl;
import com.android.server.BluetoothManagerServiceImpl;
import com.android.server.BootKeeperStubImpl;
import com.android.server.ExtendMImpl;
import com.android.server.MiuiBatteryServiceImpl;
import com.android.server.MiuiCldImpl;
import com.android.server.MiuiUiModeManagerServiceStubImpl;
import com.android.server.MountServiceIdlerImpl;
import com.android.server.NetworkManagermentServiceImp;
import com.android.server.NetworkPolicyManagerServiceImpl;
import com.android.server.NetworkTimeUpdateServiceImpl;
import com.android.server.PackageWatchdogImpl;
import com.android.server.ProcHunterImpl;
import com.android.server.RescuePartyImpl;
import com.android.server.ScoutSystemMonitor;
import com.android.server.SystemServerImpl;
import com.android.server.WatchdogImpl;
import com.android.server.WiredAccessoryManagerStubImpl;
import com.android.server.accounts.AccountManagerServiceImpl;
import com.android.server.alarm.AlarmManagerServiceStubImpl;
import com.android.server.am.ActiveServiceManagementImpl;
import com.android.server.am.ActivityManagerServiceImpl;
import com.android.server.am.AppErrorDialogImpl;
import com.android.server.am.AppErrorsImpl;
import com.android.server.am.AppNotRespondingDialogImpl;
import com.android.server.am.AppProfilerImpl;
import com.android.server.am.AutoStartManagerServiceStubImpl;
import com.android.server.am.BinderProxyMonitorImpl;
import com.android.server.am.BroadcastQueueImpl;
import com.android.server.am.ContentProviderRecordImpl;
import com.android.server.am.MiuiProcessStubImpl;
import com.android.server.am.OomAdjusterImpl;
import com.android.server.am.PendingIntentRecordImpl;
import com.android.server.am.PreloadAppControllerImpl;
import com.android.server.am.ProcessListStubImpl;
import com.android.server.am.ProcessRecordImpl;
import com.android.server.am.SchedBoostManagerInternalStubImpl;
import com.android.server.am.SmartPowerService;
import com.android.server.am.SystemPressureController;
import com.android.server.app.GameManagerServiceStubImpl;
import com.android.server.app.PreCacheUtilStubImpl;
import com.android.server.audio.AudioServiceStubImpl;
import com.android.server.audio.BtHelperImpl;
import com.android.server.audio.FocusRequesterStubImpl;
import com.android.server.audio.PlaybackActivityMonitorStubImpl;
import com.android.server.autofill.ui.SaveUiStubImpl;
import com.android.server.backup.BackupManagerServiceInjector;
import com.android.server.backup.SystemBackupAgentImpl;
import com.android.server.biometrics.BiometricServiceBaseStubImpl;
import com.android.server.biometrics.sensors.face.FaceServiceStubImpl;
import com.android.server.biometrics.sensors.fingerprint.FingerprintServiceInjectorStubImpl;
import com.android.server.biometrics.sensors.fingerprint.FingerprintServiceStubImpl;
import com.android.server.biometrics.sensors.fingerprint.MiuiFingerprintServiceStubImpl;
import com.android.server.biometrics.sensors.fingerprint.PowerFingerPrintServiceStubImpl;
import com.android.server.camera.CameraActivitySceneMode;
import com.android.server.clipboard.ClipboardServiceStubImpl;
import com.android.server.content.ContentServiceStubImpl;
import com.android.server.content.SyncManagerStubImpl;
import com.android.server.content.SyncSecurityStubImpl;
import com.android.server.content.SyncStorageEngineStubImpl;
import com.android.server.display.AutomaticBrightnessControllerImpl;
import com.android.server.display.BrightnessMappingStrategyImpl;
import com.android.server.display.DisplayManagerServiceImpl;
import com.android.server.display.DisplayModeDirectorImpl;
import com.android.server.display.DisplayPowerControllerImpl;
import com.android.server.display.MiuiBrightnessUtilsImpl;
import com.android.server.display.ScreenEffectServiceStubImpl;
import com.android.server.input.InputManagerServiceStubImpl;
import com.android.server.input.TouchWakeUpModeFeatureStubImpl;
import com.android.server.inputmethod.InputMethodManagerServiceImpl;
import com.android.server.inputmethod.MiuiInputMethodStubImpl;
import com.android.server.job.JobServiceContextImpl;
import com.android.server.lights.LightsManagerImpl;
import com.android.server.location.GnssCollectDataImpl;
import com.android.server.location.GnssLocationProviderImpl;
import com.android.server.location.GnssSmartSatelliteSwitchImpl;
import com.android.server.location.LocationDumpLogImpl;
import com.android.server.location.MiuiBlurLocationManagerImpl;
import com.android.server.location.gnss.datacollect.GnssEventTrackingImpl;
import com.android.server.location.gnss.exp.GnssBackgroundUsageOptImpl;
import com.android.server.location.gnss.hal.GnssPowerOptimizeImpl;
import com.android.server.location.gnss.hal.GnssScoringModelImpl;
import com.android.server.location.gnss.operators.GnssForKtCustomImpl;
import com.android.server.location.gnss.operators.GnssForTelcelCustomImpl;
import com.android.server.location.provider.AmapCustomImpl;
import com.android.server.locksettings.LockSettingsImpl;
import com.android.server.logcat.LogcatManagerServiceImpl;
import com.android.server.media.MediaSessionServiceStubImpl;
import com.android.server.media.projection.MediaProjectionManagerServiceStubImpl;
import com.android.server.notification.NotificationManagerServiceImpl;
import com.android.server.notification.ZenModeStubImpl;
import com.android.server.pm.MiuiDefaultPermissionGrantPolicy;
import com.android.server.pm.PackageManagerServiceImpl;
import com.android.server.pm.SettingsImpl;
import com.android.server.pm.UserManagerServiceImpl;
import com.android.server.pm.permission.MiPermissionManagerServiceImpl;
import com.android.server.policy.PhoneWindowManagerStubImpl;
import com.android.server.power.PowerManagerServiceImpl;
import com.android.server.power.ShutdownThreadImpl;
import com.android.server.statusbar.StatusBarManagerServiceStubImpl;
import com.android.server.storage.DeviceStorageMonitorServiceImpl;
import com.android.server.usb.MiuiUsbServiceImpl;
import com.android.server.vibrator.VibratorManagerServiceImpl;
import com.android.server.wallpaper.WallpaperManagerServiceImpl;
import com.android.server.wm.ActivityRecordImpl;
import com.android.server.wm.ActivityStarterImpl;
import com.android.server.wm.ActivityTaskManagerServiceImpl;
import com.android.server.wm.ActivityTaskSupervisorImpl;
import com.android.server.wm.AppRTWmsImpl;
import com.android.server.wm.AppTransitionImpl;
import com.android.server.wm.AsyncRotationControllerImpl;
import com.android.server.wm.BoundsCompatController;
import com.android.server.wm.DisplayContentStubImpl;
import com.android.server.wm.DisplayPolicyStubImpl;
import com.android.server.wm.DisplayRotationStubImpl;
import com.android.server.wm.DragDropControllerImpl;
import com.android.server.wm.FindDeviceLockWindowImpl;
import com.android.server.wm.ImmersiveModeConfirmationImpl;
import com.android.server.wm.InsetsPolicyStubImpl;
import com.android.server.wm.LetterboxImpl;
import com.android.server.wm.MIUIWatermark;
import com.android.server.wm.MiGameTypeIdentificationImpl;
import com.android.server.wm.MirrorActiveUidsImpl;
import com.android.server.wm.MiuiCvwGestureController;
import com.android.server.wm.MiuiDragStateImpl;
import com.android.server.wm.MiuiFreeFormGestureController;
import com.android.server.wm.MiuiFreeFormManagerService;
import com.android.server.wm.MiuiFreeformServiceImpl;
import com.android.server.wm.MiuiMiPerfStubImpl;
import com.android.server.wm.MiuiMultiTaskManager;
import com.android.server.wm.MiuiMultiWinSplitImpl;
import com.android.server.wm.MiuiMultiWindowServiceImpl;
import com.android.server.wm.MiuiOrientationImpl;
import com.android.server.wm.MiuiPaperContrastOverlayStubImpl;
import com.android.server.wm.MiuiRefreshRatePolicy;
import com.android.server.wm.MiuiScreenProjectionServiceExStubImpl;
import com.android.server.wm.PointerEventDispatcherImpl;
import com.android.server.wm.PreloadStateManagerImpl;
import com.android.server.wm.ProcessCompatController;
import com.android.server.wm.RealTimeModeControllerImpl;
import com.android.server.wm.ScreenRotationAnimationImpl;
import com.android.server.wm.TalkbackWatermark;
import com.android.server.wm.TaskSnapshotControllerInjectorImpl;
import com.android.server.wm.TaskSnapshotPersisterInjectorImpl;
import com.android.server.wm.TaskStubImpl;
import com.android.server.wm.WallpaperControllerImpl;
import com.android.server.wm.WindowManagerServiceImpl;
import com.android.server.wm.WindowStateAnimatorImpl;
import com.android.server.wm.WindowStateStubImpl;
import com.miui.base.MiuiStubRegistry;
import com.miui.server.sptm.SpeedTestModeServiceImpl;
import com.miui.server.xspace.XSpaceManagerServiceImpl;
import com.xiaomi.mirror.MirrorServiceImpl;
import java.util.Map;
/* loaded from: classes.dex */
public final class MiuiStubImplManifest$$ implements MiuiStubRegistry.ImplProviderManifest {
    public final void collectImplProviders(Map<String, MiuiStubRegistry.ImplProvider<?>> outProviders) {
        outProviders.put("com.android.server.SystemServerStub", new SystemServerImpl.Provider());
        outProviders.put("com.android.server.WatchdogStub", new WatchdogImpl.Provider());
        outProviders.put("com.android.server.ScoutStub", new ScoutSystemMonitor.Provider());
        outProviders.put("com.android.server.PackageWatchdogStub", new PackageWatchdogImpl.Provider());
        outProviders.put("com.android.server.RescuePartyStub", new RescuePartyImpl.Provider());
        outProviders.put("com.android.server.autofill.ui.SaveUiStub", new SaveUiStubImpl.Provider());
        outProviders.put("com.android.server.ProcHunterStub", new ProcHunterImpl.Provider());
        outProviders.put("com.android.server.BootKeeperStub", new BootKeeperStubImpl.Provider());
        outProviders.put("com.android.server.MountServiceIdlerStub", new MountServiceIdlerImpl.Provider());
        outProviders.put("com.android.server.storage.DeviceStorageMonitorServiceStub", new DeviceStorageMonitorServiceImpl.Provider());
        outProviders.put("com.android.server.MiuiCldStub", new MiuiCldImpl.Provider());
        outProviders.put("com.xiaomi.mirror.MirrorServiceStub", new MirrorServiceImpl.Provider());
        outProviders.put("com.android.server.pm.permission.DefaultPermissionGrantPolicyStub", new MiuiDefaultPermissionGrantPolicy.Provider());
        outProviders.put("com.android.server.pm.PackageManagerServiceStub", new PackageManagerServiceImpl.Provider());
        outProviders.put("com.android.server.pm.SettingsStub", new SettingsImpl.Provider());
        outProviders.put("com.android.server.pm.UserManagerServiceStub", new UserManagerServiceImpl.Provider());
        outProviders.put("com.android.server.pm.permission.PermissionManagerServiceStub", new MiPermissionManagerServiceImpl.Provider());
        outProviders.put("com.android.server.appop.AppOpsServiceStub", new AppOpsServiceStubImpl.Provider());
        outProviders.put("com.android.server.clipboard.ClipboardServiceStub", new ClipboardServiceStubImpl.Provider());
        outProviders.put("com.android.server.input.InputManagerServiceStub", new InputManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.input.TouchWakeUpModeFeatureStub", new TouchWakeUpModeFeatureStubImpl.Provider());
        outProviders.put("com.android.server.inputmethod.InputMethodManagerServiceStub", new InputMethodManagerServiceImpl.Provider());
        outProviders.put("com.android.server.inputmethod.MiuiInputMethodStub", new MiuiInputMethodStubImpl.Provider());
        outProviders.put("com.android.server.am.ActiveServiceManagementStub", new ActiveServiceManagementImpl.Provider());
        outProviders.put("com.android.server.am.ActivityManagerServiceStub", new ActivityManagerServiceImpl.Provider());
        outProviders.put("com.android.server.am.AppErrorDialogStub", new AppErrorDialogImpl.Provider());
        outProviders.put("com.android.server.am.AppErrorsStub", new AppErrorsImpl.Provider());
        outProviders.put("com.android.server.am.AppNotRespondingDialogStub", new AppNotRespondingDialogImpl.Provider());
        outProviders.put("com.android.server.am.AppProfilerStub", new AppProfilerImpl.Provider());
        outProviders.put("com.android.server.am.AutoStartManagerServiceStub", new AutoStartManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.am.BinderProxyMonitor", new BinderProxyMonitorImpl.Provider());
        outProviders.put("com.android.server.am.BroadcastQueueStub", new BroadcastQueueImpl.Provider());
        outProviders.put("com.android.server.am.ContentProviderRecordStub", new ContentProviderRecordImpl.Provider());
        outProviders.put("com.android.server.am.MiuiProcessStub", new MiuiProcessStubImpl.Provider());
        outProviders.put("com.android.server.am.OomAdjusterStub", new OomAdjusterImpl.Provider());
        outProviders.put("com.android.server.am.PendingIntentRecordStub", new PendingIntentRecordImpl.Provider());
        outProviders.put("com.android.server.am.PreloadAppControllerStub", new PreloadAppControllerImpl.Provider());
        outProviders.put("com.android.server.am.ProcessListStub", new ProcessListStubImpl.Provider());
        outProviders.put("com.android.server.am.ProcessRecordStub", new ProcessRecordImpl.Provider());
        outProviders.put("com.android.server.am.SchedBoostManagerInternalStub", new SchedBoostManagerInternalStubImpl.Provider());
        outProviders.put("com.android.server.am.SmartPowerServiceStub", new SmartPowerService.Provider());
        outProviders.put("com.android.server.am.SystemPressureControllerStub", new SystemPressureController.Provider());
        outProviders.put("com.android.server.wm.TaskStub", new TaskStubImpl.Provider());
        outProviders.put("com.android.server.wm.ImmersiveModeConfirmationStub", new ImmersiveModeConfirmationImpl.Provider());
        outProviders.put("com.android.server.wm.WindowStateAnimatorStub", new WindowStateAnimatorImpl.Provider());
        outProviders.put("com.android.server.wm.PreloadStateManagerStub", new PreloadStateManagerImpl.Provider());
        outProviders.put("com.android.server.wm.PointerEventDispatcherStub", new PointerEventDispatcherImpl.Provider());
        outProviders.put("com.android.server.wm.ActivityStarterStub", new ActivityStarterImpl.Provider());
        outProviders.put("com.android.server.wm.ActivityRecordStub", new ActivityRecordImpl.Provider());
        outProviders.put("com.android.server.wm.DisplayContentStub", new DisplayContentStubImpl.Provider());
        outProviders.put("com.android.server.wm.DisplayPolicyStub", new DisplayPolicyStubImpl.Provider());
        outProviders.put("com.android.server.wm.ActivityTaskSupervisorStub", new ActivityTaskSupervisorImpl.Provider());
        outProviders.put("com.android.server.wm.ActivityTaskManagerServiceStub", new ActivityTaskManagerServiceImpl.Provider());
        outProviders.put("com.android.server.wm.WindowManagerServiceStub", new WindowManagerServiceImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiPaperContrastOverlayStub", new MiuiPaperContrastOverlayStubImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiMultiTaskManagerStub", new MiuiMultiTaskManager.Provider());
        outProviders.put("com.android.server.wm.MIUIWatermarkStub", new MIUIWatermark.Provider());
        outProviders.put("com.android.server.wm.TalkbackWatermarkStub", new TalkbackWatermark.Provider());
        outProviders.put("com.android.server.wm.IMiuiScreenProjectionServiceExStub", new MiuiScreenProjectionServiceExStubImpl.Provider());
        outProviders.put("com.android.server.wm.FindDeviceLockWindowStub", new FindDeviceLockWindowImpl.Provider());
        outProviders.put("com.android.server.wm.AppTransitionStub", new AppTransitionImpl.Provider());
        outProviders.put("com.android.server.wm.InsetsPolicyStub", new InsetsPolicyStubImpl.Provider());
        outProviders.put("com.android.server.wm.MirrorActiveUidsStub", new MirrorActiveUidsImpl.Provider());
        outProviders.put("com.android.server.wm.ScreenRotationAnimationStub", new ScreenRotationAnimationImpl.Provider());
        outProviders.put("com.android.server.wm.AsyncRotationControllerStub", new AsyncRotationControllerImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiOrientationStub", new MiuiOrientationImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiFreeformGestureControllerStub", new MiuiFreeFormGestureController.Provider());
        outProviders.put("com.android.server.wm.MiuiFreeformServiceStub", new MiuiFreeformServiceImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiCvwGestureControllerStub", new MiuiCvwGestureController.Provider());
        outProviders.put("com.android.server.wm.MiuiFreeFormManagerServiceStub", new MiuiFreeFormManagerService.Provider());
        outProviders.put("com.android.server.wm.WindowStateStub", new WindowStateStubImpl.Provider());
        outProviders.put("com.android.server.wm.RealTimeModeControllerStub", new RealTimeModeControllerImpl.Provider());
        outProviders.put("com.android.server.wm.AppRTWmsStub", new AppRTWmsImpl.Provider());
        outProviders.put("com.android.server.wm.DragDropControllerStub", new DragDropControllerImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiMiPerfStub", new MiuiMiPerfStubImpl.Provider());
        outProviders.put("com.android.server.wm.RefreshRatePolicyStub", new MiuiRefreshRatePolicy.Provider());
        outProviders.put("com.android.server.wm.TaskSnapshotPersisterInjectorStub", new TaskSnapshotPersisterInjectorImpl.Provider());
        outProviders.put("com.android.server.wm.TaskSnapshotControllerInjectorStub", new TaskSnapshotControllerInjectorImpl.Provider());
        outProviders.put("com.android.server.wm.MiGameTypeIdentificationStub", new MiGameTypeIdentificationImpl.Provider());
        outProviders.put("com.android.server.wm.DragStateStub", new MiuiDragStateImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiMultiWindowServiceStub", new MiuiMultiWindowServiceImpl.Provider());
        outProviders.put("com.android.server.wm.MiuiMultiWinSplitStub", new MiuiMultiWinSplitImpl.Provider());
        outProviders.put("com.android.server.display.AutomaticBrightnessControllerStub", new AutomaticBrightnessControllerImpl.Provider());
        outProviders.put("com.android.server.display.BrightnessMappingStrategyStub", new BrightnessMappingStrategyImpl.Provider());
        outProviders.put("com.android.server.display.DisplayManagerServiceStub", new DisplayManagerServiceImpl.Provider());
        outProviders.put("com.android.server.display.DisplayModeDirectorStub", new DisplayModeDirectorImpl.Provider());
        outProviders.put("com.android.server.display.DisplayPowerControllerStub", new DisplayPowerControllerImpl.Provider());
        outProviders.put("com.android.server.display.MiuiBrightnessUtilsStub", new MiuiBrightnessUtilsImpl.Provider());
        outProviders.put("com.android.server.display.ScreenEffectServiceStub", new ScreenEffectServiceStubImpl.Provider());
        outProviders.put("com.android.server.lights.LightsManagerStub", new LightsManagerImpl.Provider());
        outProviders.put("com.android.server.policy.PhoneWindowManagerStub", new PhoneWindowManagerStubImpl.Provider());
        outProviders.put("com.android.server.am.SpeedTestModeServiceStub", new SpeedTestModeServiceImpl.Provider());
        outProviders.put("com.android.server.MiuiUiModeManagerServiceStub", new MiuiUiModeManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.camera.CameraActivitySceneStub", new CameraActivitySceneMode.Provider());
        outProviders.put("com.android.server.wm.DisplayRotationStub", new DisplayRotationStubImpl.Provider());
        outProviders.put("com.miui.server.xspace.XSpaceManagerServiceStub", new XSpaceManagerServiceImpl.Provider());
        outProviders.put("com.android.server.MiuiBatteryServiceStub", new MiuiBatteryServiceImpl.Provider());
        outProviders.put("com.android.server.ExtendMStub", new ExtendMImpl.Provider());
        outProviders.put("com.android.server.location.LocationDumpLogStub", new LocationDumpLogImpl.Provider());
        outProviders.put("com.android.server.location.gnss.GnssCollectDataStub", new GnssCollectDataImpl.Provider());
        outProviders.put("com.android.server.location.gnss.GnssLocationProviderStub", new GnssLocationProviderImpl.Provider());
        outProviders.put("com.android.server.location.MiuiBlurLocationManagerStub", new MiuiBlurLocationManagerImpl.Provider());
        outProviders.put("com.android.server.location.gnss.GnssEventTrackingStub", new GnssEventTrackingImpl.Provider());
        outProviders.put("com.android.server.location.gnss.exp.GnssBackgroundUsageOptStub", new GnssBackgroundUsageOptImpl.Provider());
        outProviders.put("com.android.server.location.gnss.hal.GnssPowerOptimizeStub", new GnssPowerOptimizeImpl.Provider());
        outProviders.put("com.android.server.location.gnss.hal.GnssScoringModelStub", new GnssScoringModelImpl.Provider());
        outProviders.put("com.android.server.location.gnss.operators.GnssForKtCustomStub", new GnssForKtCustomImpl.Provider());
        outProviders.put("com.android.server.location.gnss.operators.GnssForTelcelCustomStub", new GnssForTelcelCustomImpl.Provider());
        outProviders.put("com.android.server.location.provider.AmapCustomStub", new AmapCustomImpl.Provider());
        outProviders.put("com.android.server.location.GnssSmartSatelliteSwitchStub", new GnssSmartSatelliteSwitchImpl.Provider());
        outProviders.put("com.android.server.biometrics.BiometricServiceBaseStub", new BiometricServiceBaseStubImpl.Provider());
        outProviders.put("com.android.server.biometrics.sensors.fingerprint.FingerprintServiceStub", new FingerprintServiceStubImpl.Provider());
        outProviders.put("com.android.server.biometrics.sensors.fingerprint.PowerFingerPrintServiceStub", new PowerFingerPrintServiceStubImpl.Provider());
        outProviders.put("com.android.server.biometrics.sensors.fingerprint.FingerprintServiceInjectorStub", new FingerprintServiceInjectorStubImpl.Provider());
        outProviders.put("com.android.server.biometrics.sensors.fingerprint.MiuiFingerprintServiceStub", new MiuiFingerprintServiceStubImpl.Provider());
        outProviders.put("com.android.server.biometrics.sensors.face.FaceServiceStub", new FaceServiceStubImpl.Provider());
        outProviders.put("com.android.server.backup.BackupManagerServiceStub", new BackupManagerServiceInjector.Provider());
        outProviders.put("com.android.server.audio.AudioServiceStub", new AudioServiceStubImpl.Provider());
        outProviders.put("com.android.server.audio.BtHelperStub", new BtHelperImpl.Provider());
        outProviders.put("com.android.server.audio.FocusRequesterStub", new FocusRequesterStubImpl.Provider());
        outProviders.put("com.android.server.audio.PlaybackActivityMonitorStub", new PlaybackActivityMonitorStubImpl.Provider());
        outProviders.put("com.android.server.WiredAccessoryManagerStub", new WiredAccessoryManagerStubImpl.Provider());
        outProviders.put("com.android.server.media.MediaSessionServiceStub", new MediaSessionServiceStubImpl.Provider());
        outProviders.put("com.android.server.media.projection.MediaProjectionManagerServiceStub", new MediaProjectionManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.notification.NotificationManagerServiceStub", new NotificationManagerServiceImpl.Provider());
        outProviders.put("com.android.server.notification.ZenModeStub", new ZenModeStubImpl.Provider());
        outProviders.put("com.android.server.BluetoothManagerServiceStub", new BluetoothManagerServiceImpl.Provider());
        outProviders.put("com.android.server.vibrator.VibratorManagerServiceStub", new VibratorManagerServiceImpl.Provider());
        outProviders.put("com.android.server.backup.SystemBackupAgentStub", new SystemBackupAgentImpl.Provider());
        outProviders.put("com.android.server.wallpaper.WallpaperManagerServiceStub", new WallpaperManagerServiceImpl.Provider());
        outProviders.put("com.android.server.NetworkPolicyManagerServiceStub", new NetworkPolicyManagerServiceImpl.Provider());
        outProviders.put("com.android.server.NetworkTimeUpdateServiceStub", new NetworkTimeUpdateServiceImpl.Provider());
        outProviders.put("com.android.server.NetworkManagementServiceStub", new NetworkManagermentServiceImp.Provider());
        outProviders.put("com.android.server.usb.MiuiUsbServiceStub", new MiuiUsbServiceImpl.Provider());
        outProviders.put("com.android.server.content.ContentServiceStub", new ContentServiceStubImpl.Provider());
        outProviders.put("com.android.server.content.SyncManagerStub", new SyncManagerStubImpl.Provider());
        outProviders.put("com.android.server.content.SyncSecurityStub", new SyncSecurityStubImpl.Provider());
        outProviders.put("com.android.server.content.SyncStorageEngineStub", new SyncStorageEngineStubImpl.Provider());
        outProviders.put("com.android.server.accounts.AccountManagerServiceStub", new AccountManagerServiceImpl.Provider());
        outProviders.put("com.android.server.statusbar.StatusBarManagerServiceStub", new StatusBarManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.power.PowerManagerServiceStub", new PowerManagerServiceImpl.Provider());
        outProviders.put("com.android.server.power.ShutdownThreadStub", new ShutdownThreadImpl.Provider());
        outProviders.put("com.android.server.locksettings.LockSettingsStub", new LockSettingsImpl.Provider());
        outProviders.put("com.android.server.alarm.AlarmManagerServiceStub", new AlarmManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.job.JobServiceContextStub", new JobServiceContextImpl.Provider());
        outProviders.put("com.android.server.wm.BoundsCompatControllerStub", new BoundsCompatController.Provider());
        outProviders.put("com.android.server.wm.ProcessCompatControllerStub", new ProcessCompatController.Provider());
        outProviders.put("com.android.server.wm.LetterboxStub", new LetterboxImpl.Provider());
        outProviders.put("com.android.server.logcat.LogcatManagerServiceStub", new LogcatManagerServiceImpl.Provider());
        outProviders.put("com.android.server.app.GameManagerServiceStub", new GameManagerServiceStubImpl.Provider());
        outProviders.put("com.android.server.app.PreCacheUtilStub", new PreCacheUtilStubImpl.Provider());
        outProviders.put("com.android.server.wm.WallpaperControllerStub", new WallpaperControllerImpl.Provider());
    }

    public final void collectImplProvidersClass(Map outProvidersClass, ClassLoader classloader) throws ClassNotFoundException {
        outProvidersClass.put("com.android.server.SystemServerStub", Class.forName("com.android.server.SystemServerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.WatchdogStub", Class.forName("com.android.server.WatchdogImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.ScoutStub", Class.forName("com.android.server.ScoutSystemMonitor$Provider", true, classloader));
        outProvidersClass.put("com.android.server.PackageWatchdogStub", Class.forName("com.android.server.PackageWatchdogImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.RescuePartyStub", Class.forName("com.android.server.RescuePartyImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.autofill.ui.SaveUiStub", Class.forName("com.android.server.autofill.ui.SaveUiStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.ProcHunterStub", Class.forName("com.android.server.ProcHunterImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.BootKeeperStub", Class.forName("com.android.server.BootKeeperStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.MountServiceIdlerStub", Class.forName("com.android.server.MountServiceIdlerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.storage.DeviceStorageMonitorServiceStub", Class.forName("com.android.server.storage.DeviceStorageMonitorServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.MiuiCldStub", Class.forName("com.android.server.MiuiCldImpl$Provider", true, classloader));
        outProvidersClass.put("com.xiaomi.mirror.MirrorServiceStub", Class.forName("com.xiaomi.mirror.MirrorServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.pm.permission.DefaultPermissionGrantPolicyStub", Class.forName("com.android.server.pm.MiuiDefaultPermissionGrantPolicy$Provider", true, classloader));
        outProvidersClass.put("com.android.server.pm.PackageManagerServiceStub", Class.forName("com.android.server.pm.PackageManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.pm.SettingsStub", Class.forName("com.android.server.pm.SettingsImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.pm.UserManagerServiceStub", Class.forName("com.android.server.pm.UserManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.pm.permission.PermissionManagerServiceStub", Class.forName("com.android.server.pm.permission.MiPermissionManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.appop.AppOpsServiceStub", Class.forName("com.android.server.AppOpsServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.clipboard.ClipboardServiceStub", Class.forName("com.android.server.clipboard.ClipboardServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.input.InputManagerServiceStub", Class.forName("com.android.server.input.InputManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.input.TouchWakeUpModeFeatureStub", Class.forName("com.android.server.input.TouchWakeUpModeFeatureStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.inputmethod.InputMethodManagerServiceStub", Class.forName("com.android.server.inputmethod.InputMethodManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.inputmethod.MiuiInputMethodStub", Class.forName("com.android.server.inputmethod.MiuiInputMethodStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.ActiveServiceManagementStub", Class.forName("com.android.server.am.ActiveServiceManagementImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.ActivityManagerServiceStub", Class.forName("com.android.server.am.ActivityManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.AppErrorDialogStub", Class.forName("com.android.server.am.AppErrorDialogImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.AppErrorsStub", Class.forName("com.android.server.am.AppErrorsImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.AppNotRespondingDialogStub", Class.forName("com.android.server.am.AppNotRespondingDialogImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.AppProfilerStub", Class.forName("com.android.server.am.AppProfilerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.AutoStartManagerServiceStub", Class.forName("com.android.server.am.AutoStartManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.BinderProxyMonitor", Class.forName("com.android.server.am.BinderProxyMonitorImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.BroadcastQueueStub", Class.forName("com.android.server.am.BroadcastQueueImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.ContentProviderRecordStub", Class.forName("com.android.server.am.ContentProviderRecordImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.MiuiProcessStub", Class.forName("com.android.server.am.MiuiProcessStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.OomAdjusterStub", Class.forName("com.android.server.am.OomAdjusterImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.PendingIntentRecordStub", Class.forName("com.android.server.am.PendingIntentRecordImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.PreloadAppControllerStub", Class.forName("com.android.server.am.PreloadAppControllerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.ProcessListStub", Class.forName("com.android.server.am.ProcessListStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.ProcessRecordStub", Class.forName("com.android.server.am.ProcessRecordImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.SchedBoostManagerInternalStub", Class.forName("com.android.server.am.SchedBoostManagerInternalStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.SmartPowerServiceStub", Class.forName("com.android.server.am.SmartPowerService$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.SystemPressureControllerStub", Class.forName("com.android.server.am.SystemPressureController$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.TaskStub", Class.forName("com.android.server.wm.TaskStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ImmersiveModeConfirmationStub", Class.forName("com.android.server.wm.ImmersiveModeConfirmationImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.WindowStateAnimatorStub", Class.forName("com.android.server.wm.WindowStateAnimatorImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.PreloadStateManagerStub", Class.forName("com.android.server.wm.PreloadStateManagerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.PointerEventDispatcherStub", Class.forName("com.android.server.wm.PointerEventDispatcherImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ActivityStarterStub", Class.forName("com.android.server.wm.ActivityStarterImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ActivityRecordStub", Class.forName("com.android.server.wm.ActivityRecordImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.DisplayContentStub", Class.forName("com.android.server.wm.DisplayContentStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.DisplayPolicyStub", Class.forName("com.android.server.wm.DisplayPolicyStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ActivityTaskSupervisorStub", Class.forName("com.android.server.wm.ActivityTaskSupervisorImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ActivityTaskManagerServiceStub", Class.forName("com.android.server.wm.ActivityTaskManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.WindowManagerServiceStub", Class.forName("com.android.server.wm.WindowManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiPaperContrastOverlayStub", Class.forName("com.android.server.wm.MiuiPaperContrastOverlayStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiMultiTaskManagerStub", Class.forName("com.android.server.wm.MiuiMultiTaskManager$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MIUIWatermarkStub", Class.forName("com.android.server.wm.MIUIWatermark$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.TalkbackWatermarkStub", Class.forName("com.android.server.wm.TalkbackWatermark$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.IMiuiScreenProjectionServiceExStub", Class.forName("com.android.server.wm.MiuiScreenProjectionServiceExStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.FindDeviceLockWindowStub", Class.forName("com.android.server.wm.FindDeviceLockWindowImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.AppTransitionStub", Class.forName("com.android.server.wm.AppTransitionImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.InsetsPolicyStub", Class.forName("com.android.server.wm.InsetsPolicyStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MirrorActiveUidsStub", Class.forName("com.android.server.wm.MirrorActiveUidsImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ScreenRotationAnimationStub", Class.forName("com.android.server.wm.ScreenRotationAnimationImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.AsyncRotationControllerStub", Class.forName("com.android.server.wm.AsyncRotationControllerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiOrientationStub", Class.forName("com.android.server.wm.MiuiOrientationImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiFreeformGestureControllerStub", Class.forName("com.android.server.wm.MiuiFreeFormGestureController$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiFreeformServiceStub", Class.forName("com.android.server.wm.MiuiFreeformServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiCvwGestureControllerStub", Class.forName("com.android.server.wm.MiuiCvwGestureController$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiFreeFormManagerServiceStub", Class.forName("com.android.server.wm.MiuiFreeFormManagerService$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.WindowStateStub", Class.forName("com.android.server.wm.WindowStateStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.RealTimeModeControllerStub", Class.forName("com.android.server.wm.RealTimeModeControllerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.AppRTWmsStub", Class.forName("com.android.server.wm.AppRTWmsImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.DragDropControllerStub", Class.forName("com.android.server.wm.DragDropControllerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiMiPerfStub", Class.forName("com.android.server.wm.MiuiMiPerfStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.RefreshRatePolicyStub", Class.forName("com.android.server.wm.MiuiRefreshRatePolicy$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.TaskSnapshotPersisterInjectorStub", Class.forName("com.android.server.wm.TaskSnapshotPersisterInjectorImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.TaskSnapshotControllerInjectorStub", Class.forName("com.android.server.wm.TaskSnapshotControllerInjectorImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiGameTypeIdentificationStub", Class.forName("com.android.server.wm.MiGameTypeIdentificationImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.DragStateStub", Class.forName("com.android.server.wm.MiuiDragStateImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiMultiWindowServiceStub", Class.forName("com.android.server.wm.MiuiMultiWindowServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.MiuiMultiWinSplitStub", Class.forName("com.android.server.wm.MiuiMultiWinSplitImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.AutomaticBrightnessControllerStub", Class.forName("com.android.server.display.AutomaticBrightnessControllerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.BrightnessMappingStrategyStub", Class.forName("com.android.server.display.BrightnessMappingStrategyImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.DisplayManagerServiceStub", Class.forName("com.android.server.display.DisplayManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.DisplayModeDirectorStub", Class.forName("com.android.server.display.DisplayModeDirectorImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.DisplayPowerControllerStub", Class.forName("com.android.server.display.DisplayPowerControllerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.MiuiBrightnessUtilsStub", Class.forName("com.android.server.display.MiuiBrightnessUtilsImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.display.ScreenEffectServiceStub", Class.forName("com.android.server.display.ScreenEffectServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.lights.LightsManagerStub", Class.forName("com.android.server.lights.LightsManagerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.policy.PhoneWindowManagerStub", Class.forName("com.android.server.policy.PhoneWindowManagerStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.am.SpeedTestModeServiceStub", Class.forName("com.miui.server.sptm.SpeedTestModeServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.MiuiUiModeManagerServiceStub", Class.forName("com.android.server.MiuiUiModeManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.camera.CameraActivitySceneStub", Class.forName("com.android.server.camera.CameraActivitySceneMode$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.DisplayRotationStub", Class.forName("com.android.server.wm.DisplayRotationStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.miui.server.xspace.XSpaceManagerServiceStub", Class.forName("com.miui.server.xspace.XSpaceManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.MiuiBatteryServiceStub", Class.forName("com.android.server.MiuiBatteryServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.ExtendMStub", Class.forName("com.android.server.ExtendMImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.LocationDumpLogStub", Class.forName("com.android.server.location.LocationDumpLogImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.GnssCollectDataStub", Class.forName("com.android.server.location.GnssCollectDataImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.GnssLocationProviderStub", Class.forName("com.android.server.location.GnssLocationProviderImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.MiuiBlurLocationManagerStub", Class.forName("com.android.server.location.MiuiBlurLocationManagerImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.GnssEventTrackingStub", Class.forName("com.android.server.location.gnss.datacollect.GnssEventTrackingImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.exp.GnssBackgroundUsageOptStub", Class.forName("com.android.server.location.gnss.exp.GnssBackgroundUsageOptImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.hal.GnssPowerOptimizeStub", Class.forName("com.android.server.location.gnss.hal.GnssPowerOptimizeImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.hal.GnssScoringModelStub", Class.forName("com.android.server.location.gnss.hal.GnssScoringModelImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.operators.GnssForKtCustomStub", Class.forName("com.android.server.location.gnss.operators.GnssForKtCustomImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.gnss.operators.GnssForTelcelCustomStub", Class.forName("com.android.server.location.gnss.operators.GnssForTelcelCustomImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.provider.AmapCustomStub", Class.forName("com.android.server.location.provider.AmapCustomImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.location.GnssSmartSatelliteSwitchStub", Class.forName("com.android.server.location.GnssSmartSatelliteSwitchImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.biometrics.BiometricServiceBaseStub", Class.forName("com.android.server.biometrics.BiometricServiceBaseStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.biometrics.sensors.fingerprint.FingerprintServiceStub", Class.forName("com.android.server.biometrics.sensors.fingerprint.FingerprintServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.biometrics.sensors.fingerprint.PowerFingerPrintServiceStub", Class.forName("com.android.server.biometrics.sensors.fingerprint.PowerFingerPrintServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.biometrics.sensors.fingerprint.FingerprintServiceInjectorStub", Class.forName("com.android.server.biometrics.sensors.fingerprint.FingerprintServiceInjectorStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.biometrics.sensors.fingerprint.MiuiFingerprintServiceStub", Class.forName("com.android.server.biometrics.sensors.fingerprint.MiuiFingerprintServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.biometrics.sensors.face.FaceServiceStub", Class.forName("com.android.server.biometrics.sensors.face.FaceServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.backup.BackupManagerServiceStub", Class.forName("com.android.server.backup.BackupManagerServiceInjector$Provider", true, classloader));
        outProvidersClass.put("com.android.server.audio.AudioServiceStub", Class.forName("com.android.server.audio.AudioServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.audio.BtHelperStub", Class.forName("com.android.server.audio.BtHelperImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.audio.FocusRequesterStub", Class.forName("com.android.server.audio.FocusRequesterStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.audio.PlaybackActivityMonitorStub", Class.forName("com.android.server.audio.PlaybackActivityMonitorStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.WiredAccessoryManagerStub", Class.forName("com.android.server.WiredAccessoryManagerStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.media.MediaSessionServiceStub", Class.forName("com.android.server.media.MediaSessionServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.media.projection.MediaProjectionManagerServiceStub", Class.forName("com.android.server.media.projection.MediaProjectionManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.notification.NotificationManagerServiceStub", Class.forName("com.android.server.notification.NotificationManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.notification.ZenModeStub", Class.forName("com.android.server.notification.ZenModeStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.BluetoothManagerServiceStub", Class.forName("com.android.server.BluetoothManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.vibrator.VibratorManagerServiceStub", Class.forName("com.android.server.vibrator.VibratorManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.backup.SystemBackupAgentStub", Class.forName("com.android.server.backup.SystemBackupAgentImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wallpaper.WallpaperManagerServiceStub", Class.forName("com.android.server.wallpaper.WallpaperManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.NetworkPolicyManagerServiceStub", Class.forName("com.android.server.NetworkPolicyManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.NetworkTimeUpdateServiceStub", Class.forName("com.android.server.NetworkTimeUpdateServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.NetworkManagementServiceStub", Class.forName("com.android.server.NetworkManagermentServiceImp$Provider", true, classloader));
        outProvidersClass.put("com.android.server.usb.MiuiUsbServiceStub", Class.forName("com.android.server.usb.MiuiUsbServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.content.ContentServiceStub", Class.forName("com.android.server.content.ContentServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.content.SyncManagerStub", Class.forName("com.android.server.content.SyncManagerStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.content.SyncSecurityStub", Class.forName("com.android.server.content.SyncSecurityStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.content.SyncStorageEngineStub", Class.forName("com.android.server.content.SyncStorageEngineStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.accounts.AccountManagerServiceStub", Class.forName("com.android.server.accounts.AccountManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.statusbar.StatusBarManagerServiceStub", Class.forName("com.android.server.statusbar.StatusBarManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.power.PowerManagerServiceStub", Class.forName("com.android.server.power.PowerManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.power.ShutdownThreadStub", Class.forName("com.android.server.power.ShutdownThreadImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.locksettings.LockSettingsStub", Class.forName("com.android.server.locksettings.LockSettingsImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.alarm.AlarmManagerServiceStub", Class.forName("com.android.server.alarm.AlarmManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.job.JobServiceContextStub", Class.forName("com.android.server.job.JobServiceContextImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.BoundsCompatControllerStub", Class.forName("com.android.server.wm.BoundsCompatController$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.ProcessCompatControllerStub", Class.forName("com.android.server.wm.ProcessCompatController$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.LetterboxStub", Class.forName("com.android.server.wm.LetterboxImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.logcat.LogcatManagerServiceStub", Class.forName("com.android.server.logcat.LogcatManagerServiceImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.app.GameManagerServiceStub", Class.forName("com.android.server.app.GameManagerServiceStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.app.PreCacheUtilStub", Class.forName("com.android.server.app.PreCacheUtilStubImpl$Provider", true, classloader));
        outProvidersClass.put("com.android.server.wm.WallpaperControllerStub", Class.forName("com.android.server.wm.WallpaperControllerImpl$Provider", true, classloader));
    }
}
